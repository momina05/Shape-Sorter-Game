package com.shapesorter;

import com.shapesorter.dao.DatabaseConnection;
import com.shapesorter.dao.GameDAO;
import com.shapesorter.model.*;
import com.shapesorter.util.GameUtils;
import java.sql.SQLException;
import java.util.*;

public class ShapeSorterGame {
    private Shape[] shapes;
    private Container[] containers;
    private int score;
    private final Scanner scanner;
    private final GameDAO gameDAO;

    public ShapeSorterGame() {
        this.shapes = new Shape[5]; // Default 5 shapes
        this.containers = new Container[3]; // Default 3 containers
        this.scanner = new Scanner(System.in);
        this.gameDAO = new GameDAO();
        initializeGame();
    }

    private void initializeGame() {
        // Initialize shapes with random types and colors
        String[] shapeTypes = {"Circle", "Square", "Triangle"};
        Random random = new Random();

        for (int i = 0; i < shapes.length; i++) {
            String color = GameUtils.getRandomColor();
            String type = shapeTypes[random.nextInt(shapeTypes.length)];
            shapes[i] = switch (type) {
                case "Circle" -> new Circle(color);
                case "Square" -> new Square(color);
                case "Triangle" -> new Triangle(color);
                default -> throw new IllegalStateException("Invalid shape type");
            };
        }

        // Initialize containers with unique colors
        Set<String> usedColors = new HashSet<>();
        for (int i = 0; i < containers.length; i++) {
            String color;
            do {
                color = GameUtils.getRandomColor();
            } while (usedColors.contains(color));

            usedColors.add(color);
            containers[i] = new Container(color);
        }
    }

    public void startGame() {
        displayWelcomeMessage();

        try {
            gameLoop();
        } finally {
            DatabaseConnection.closeConnection();
            scanner.close();
        }
    }

    private void gameLoop() {
        while (!isGameOver()) {
            displayGameState();
            processInput(scanner.nextLine().trim());
        }
        endGame();
    }

    private void displayWelcomeMessage() {
        System.out.println("=== SHAPE SORTER GAME ===");
        System.out.println("Match shapes to containers by color!");
        try {
            System.out.println("Current High Score: " + gameDAO.getHighScore());
        } catch (SQLException e) {
            System.out.println("Couldn't load high score: " + e.getMessage());
        }
    }

    private void displayGameState() {
        System.out.println("\nScore: " + score);

        System.out.println("\nShapes:");
        for (int i = 0; i < shapes.length; i++) {
            if (shapes[i] != null) {
                System.out.print((i + 1) + ". ");
                shapes[i].display();
                System.out.print(" ");
            }
        }

        System.out.println("\n\nContainers:");
        for (int i = 0; i < containers.length; i++) {
            System.out.print((char)('A' + i) + ". ");
            containers[i].display();
        }

        System.out.println("\nOptions:");
        System.out.println("- [shape#][container] (e.g., 1A)");
        System.out.println("- interact [shape#]");
        System.out.println("- scores (view top 10)");
        System.out.println("- quit");
        System.out.print("> ");
    }

    private void processInput(String input) {
        try {
            if (input.equalsIgnoreCase("quit")) {
                endGame();
                System.exit(0);
            } else if (input.equalsIgnoreCase("scores")) {
                displayTopScores();
            } else if (input.startsWith("interact ")) {
                interactWithShape(input.substring(9).trim());
            } else if (input.matches("[1-5][A-Ca-c]")) {
                sortShape(input);
            } else {
                System.out.println("Invalid input!");
            }
        } catch (SQLException e) {
            System.err.println("Database error: " + e.getMessage());
        }
    }

    private void interactWithShape(String shapeNumber) throws SQLException {
        if (!GameUtils.isNumeric(shapeNumber)) {
            System.out.println("Please enter a valid shape number");
            return;
        }

        int index = Integer.parseInt(shapeNumber) - 1;
        if (index >= 0 && index < shapes.length && shapes[index] != null) {
            shapes[index].onInteract();
            score++;
            shapes[index] = null;
            System.out.println("+1 point!");
        } else {
            System.out.println("Invalid shape number");
        }
    }

    private void sortShape(String input) {
        int shapeIndex = Integer.parseInt(input.substring(0, 1)) - 1;
        int containerIndex = Character.toUpperCase(input.charAt(1)) - 'A';

        if (shapeIndex < 0 || shapeIndex >= shapes.length || shapes[shapeIndex] == null ||
                containerIndex < 0 || containerIndex >= containers.length) {
            System.out.println("Invalid selection!");
            return;
        }

        if (containers[containerIndex].canAccept(shapes[shapeIndex])) {
            System.out.println("Correct match! +1 point");
            score++;
            shapes[shapeIndex] = null;
        } else {
            System.out.println("Wrong container! Try again.");
        }
    }

    private void displayTopScores() throws SQLException {
        System.out.println("\n--- TOP SCORES ---");
        gameDAO.getTopScores().forEach(System.out::println);
    }

    private boolean isGameOver() {
        for (Shape shape : shapes) {
            if (shape != null) return false;
        }
        return true;
    }

    private void endGame() {
        System.out.println("\n=== GAME OVER ===");
        System.out.println("Final Score: " + score);

        try {
            System.out.print("Enter your name to save score: ");
            String playerName = scanner.nextLine().trim();
            if (!playerName.isEmpty()) {
                gameDAO.saveScore(playerName, score);
                System.out.println("Score saved!");
                displayTopScores();
            }
        } catch (SQLException e) {
            System.err.println("Failed to save score: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        new ShapeSorterGame().startGame();
    }
